service: cloudflare-scanner

provider:
  name: aws
  runtime: provided.al2
  stage: prod
  timeout: 30
  versionFunctions: false
  memorySize: 512
  logRetentionInDays: 14
  tags:
    managed_by: serverless
    itse_app_name: ${self:custom.app_name}
    itse_app_customer: ${self:custom.customer}
    itse_app_env: production
  stackTags:
    managed_by: serverless
    itse_app_name: ${self:custom.app_name}
    itse_app_customer: ${self:custom.customer}
    itse_app_env: production
    name: cloudformation_stack-${self:custom.app_name}-${self:custom.customer}-production
  iam:
    role:
      statements:
      - Effect: "Allow"
        Action:
        - "ses:SendEmail"
        Resource: "*"
      - Effect: "Allow"
        Action:
        - "appconfig:GetLatestConfiguration"
        - "appconfig:StartConfigurationSession"
        Resource:
        - "arn:aws:appconfig:${aws:region}:${aws:accountId}:application/${env:APP_ID}/environment/${env:ENV_ID}/configuration/${env:CONFIG_ID}"
  deploymentBucket:
    tags:
      managed_by: serverless
      itse_app_name: ${self:custom.app_name}
      itse_app_customer: ${self:custom.customer}
      itse_app_env: production
      name: s3_bucket-${self:custom.app_name}-${self:custom.customer}-production

custom:
  app_name: cloudflare-scanner
  customer: gtis
  config_profile: default

package:
  patterns:
    - '!./**'
    - './bootstrap'

functions:
  alerts:
    environment:
      APPLICATION_IDENTIFIER: ${self:custom.app_name}
      CONFIG_PROFILE_IDENTIFIER: ${self:custom.config_profile}
      ENVIRONMENT: ${sls:stage}
    handler: bootstrap
    timeout: 300
    events:
      # cron(Minutes Hours Day-of-month Month Day-of-week Year)
      # Either `day-of-month` or `day-of-week` must be a question mark (?)
       - schedule: cron(30 0/2 ? * MON,TUE,WED,THU,FRI *)
    tags:
      name: lambda_function_1-${self:custom.app_name}-${self:custom.customer}-production
